#!/bin/sh

# script/bootstrap: Resolve all dependencies that the application requires to run.

# Exit script if any commands return errors (if they exit with non-zero)
set -e

# Work from the app’s root directory
cd "$(dirname "$0")/.."

echo
echo "==> Running script/bootstrap…"
echo

# Create either .bash_profile (default) or .zshrc in $HOME directory
echo "==> Do you plan to use Z shell? (y/N)"
read zsh_user

if [[ $zsh_user == 'y' ]]; then
  touch ~/.zshrc
else
  touch ~/.bash_profile
fi

# Download strap.sh and run it
echo "==> Downloading strap.sh script from github.com/MikeMcQuaid/strap…"
curl https://raw.githubusercontent.com/MikeMcQuaid/strap/master/bin/strap.sh -o strap.sh
echo

echo "==> Strapping your Mac…"
sh strap.sh
echo

# Delete strap.sh
echo "==> Deleting strap.sh script…"
rm strap.sh
echo

# Read the Ruby version from .ruby-version file
ruby_version=`cat .ruby-version`

# Install Ruby version from .ruby-version file
echo "==> Installing Ruby: $ruby_version …"
rbenv install -s $ruby_version
echo

# Add rbenv’s auto-switching to .bash_profile/.zshrc, unless its already in there
# Then, re-source the .bash_profile/.zshrc for current user
echo "==> Adding Ruby version auto-switching to .bash_profile/.zshrc…"

if [[ -f ~/.bash_profile ]]; then
  grep -qF -- 'eval "$(rbenv init -)"' ~/.bash_profile || echo '\n# rbenv ruby version auto-switching - inserted by @hoverinc\neval "$(rbenv init -)"' >> ~/.bash_profile
  set +e
  source ~/.bash_profile
  set -e
fi
if [[ -f ~/.zshrc ]]; then
  grep -qF -- 'eval "$(rbenv init -)"' ~/.zshrc || echo '\n# rbenv ruby version auto-switching - inserted by @hoverinc\neval "$(rbenv init -)"' >> ~/.zshrc
  set +e
  source ~/.zshrc
  set -e
fi
echo

# Re-source the .bash_profile for current user
set +e
source ~/.bash_profile
set -e

# Install Bundler
echo "==> Installing the Bundler Ruby gem…"
gem install bundler
echo

# Install nvm via its install script, not Homebrew
echo "==> Installing nvm…"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
echo

# Create NVM’s working directory if it doesn't exist
mkdir -p ~/.nvm

# Install latest Node and NPM with nvm
echo "==> Installing latest Node and NPM…"
set +e
source ~/.nvm/nvm.sh # This loads nvm
nvm install  --lts --latest-npm
set -e
echo

# Pin Postgres to a particular legacy version
required_postgresql_version='9.6.10'

# Check if Postgres is already installed
if which psql > /dev/null; then
  postgres_installed='true'
  postgres_version=`psql --version`

  if [[ $postgres_version=="psql (PostgreSQL) $required_postgresql_version" ]]; then
    required_postgres_version_installed='true'
  else
    required_postgres_version_installed='false'
  fi
else
  postgres_installed='false'
  required_postgres_version_installed='false'
fi

# Install Postgres
if [[ $required_postgres_version_installed == 'false' ]]; then
  brew cleanup
  echo

  # Tap CloverHealth’s Postgres and Postgis formulas
  echo "==> Tapping CloverHealth’s Postgres and Postgis formulas…"
  brew tap cloverhealth/homebrew-tap
  echo

  # Re-install latest Postgres
  echo "==> Re-installing latest Postgres…"
  brew install postgresql
  echo

  # Unlink latest Postgres formula
  echo "==> Unlinking latest brew Postgres formula…"
  brew unlink postgresql
  echo

  # Delete any previous Postgres data directory
  echo "==> Deleting Postgres data directory…"
  rm -rf /usr/local/var/postgres
  echo

  # Install Postgres via CloverHealth’s formula
  echo "==> Installing CloverHealth’s version of Postgres…"
  brew install cloverhealth/tap/postgresql
  echo

  # Switch to Postgres $required_postgresql_version
  echo "==> Switching to version $required_postgresql_version of Postgres…"
  brew switch postgresql $required_postgresql_version
  echo

  # Install Postgis via CloverHealth’s formula
  echo "==> Installing CloverHealth’s version of Postgis…"
  brew install cloverhealth/tap/postgis
  echo
fi

# All done!
echo "==> SUCCESS! Your development environment is now bootstrapped!"
echo "    Up next: TODO"
echo
echo
